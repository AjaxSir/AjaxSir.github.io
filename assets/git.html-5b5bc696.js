import{_ as e,o as i,c as o,a as t}from"./app-5351db84.js";const c="/assets/sshkey-9c98e5e8.png",a="/assets/viewkey-75408fa3.png",l="/assets/gitLog-24fea5a4.png",d={},r=t('<h3 id="配置ssh-key" tabindex="-1"><a class="header-anchor" href="#配置ssh-key" aria-hidden="true">#</a> 配置ssh key</h3><ul><li><code>ssh-keygen -t rsa -C &quot;A@hotmail.com&quot;</code><img src="'+c+'" alt="sshkey"></li><li>查看ssh key <img src="'+a+'" alt="viewkey"></li></ul><h3 id="远程分支连接" tabindex="-1"><a class="header-anchor" href="#远程分支连接" aria-hidden="true">#</a> 远程分支连接</h3><ul><li><code>git init</code> 初始化git仓库</li><li><code>git remote add origin</code> 添加远程仓库</li><li><code>git remote rm origin</code> 删除远程仓库</li><li><code>git remote -v</code> 查看远程分支</li><li><code>git remote set-url origin &lt;remote-url&gt;</code> 修改远程分支</li></ul><h3 id="配置名字和邮箱" tabindex="-1"><a class="header-anchor" href="#配置名字和邮箱" aria-hidden="true">#</a> 配置名字和邮箱</h3><ul><li><code>git config --global user.name &quot;name&quot;</code> --global 配置全局</li><li><code>git config --global user.email &quot;name&quot;</code> --global 配置全局</li><li><code>git config --global -l</code> 查看全局配置</li></ul><h3 id="查看日志" tabindex="-1"><a class="header-anchor" href="#查看日志" aria-hidden="true">#</a> 查看日志</h3><ul><li><code>git log --pretty=oneline</code><img src="'+l+'" alt="gitLog"></li><li><code>git log -n1</code> 查看最近一次的日志信息</li><li><code>git log --graph --oneline --all</code> 图形化展示的 <code>git log</code></li></ul><h3 id="回退版本" tabindex="-1"><a class="header-anchor" href="#回退版本" aria-hidden="true">#</a> 回退版本</h3><ul><li><code>git reset</code></li></ul><blockquote><p>git reset --hard commit_id 回退到某一个commit_id 并舍弃后续提交<br> git reset --soft commit_id 回退到某一个commit_id 并将改动保存到暂存区<br> 配合 <code>git commit --amend</code>使用 修改之前的提交消息、添加或删除某些更改，但是不想改变之前的提交历史，你可以使用 git reset --soft。修改完提交后，可以使用 git commit --amend 来提交这个新的更改</p></blockquote><h3 id="储藏" tabindex="-1"><a class="header-anchor" href="#储藏" aria-hidden="true">#</a> 储藏</h3><ul><li><code>git stash</code> 储藏</li><li><code>git stash list</code> 储藏列表</li><li><code>git stash apply</code> 恢复之前保存的 stash，stash@{0} 表示第一个 stash</li><li><code>git stash pop</code> 恢复最近保存的 并删除stash 记录</li></ul><h3 id="分支信息" tabindex="-1"><a class="header-anchor" href="#分支信息" aria-hidden="true">#</a> 分支信息</h3><ul><li><code>git branch</code> 查看本地分支信息 <code>-a</code> 本地及远程仓库分支</li><li><code>git checkout</code> 切换分支</li><li><code>git checkout -b </code> 在当前分支下切一个新的分支 <code>git checkout -b branch origin/branch</code> 拉起远程 origin/branck 作为本地branch分支</li></ul><h3 id="标签" tabindex="-1"><a class="header-anchor" href="#标签" aria-hidden="true">#</a> 标签</h3><ul><li><code>git tag v1.0.0</code> 创建一个轻量级的标签，只是一个指向当前提交的指针</li><li><code>git tag -a v1.0.0 -m &quot;Release version 1.0.0&quot;</code> 创建一个带注释的标签，你可以添加详细的描述信息</li><li><code>git tag -a v1.0.0 &lt;commit_sha&gt;</code> 特定的提交上创建一个带注释的标签</li><li><code>git tag</code> 列出所有存在的标签</li><li><code>git show v1.0.0</code> 查看特定标签的信息</li><li><code>git push origin v1.0.0</code> 推送特定标签到远程</li><li><code>git tag -d v1.0.0</code> 删除本地标签</li><li><code>git push origin --delete v1.0.0</code> 删除远程标签</li><li><code>git checkout -b new_branch tags/&lt;tag_name&gt;</code> 拉取特定的标签</li><li><code>git fetch origin tag &lt;tag_name&gt;</code> 只是想拉取远程仓库中的特定标签</li></ul><h3 id="推送代码" tabindex="-1"><a class="header-anchor" href="#推送代码" aria-hidden="true">#</a> 推送代码</h3><ul><li><code>git push</code></li></ul><blockquote><p><code>-u</code> 本地分支与远程分支关联，使得以后可以使用 git push 或 git pull 无需指定远程分支和本地分支<br><code>-f</code> 强制推送，覆盖远程仓库的提交历史。慎用，因为这可能会破坏其他人的工作<br><code>git push origin branch</code> 指定分支到指定的远程仓库</p></blockquote>',20),s=[r];function h(g,n){return i(),o("div",null,s)}const m=e(d,[["render",h],["__file","git.html.vue"]]);export{m as default};
